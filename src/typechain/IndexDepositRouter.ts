/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IReserveRouter {
  export type QuoteParamsStruct = {
    input: PromiseOrValue<string>;
    inputAmount: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    swapTarget: PromiseOrValue<string>;
    assetQuote: PromiseOrValue<BytesLike>;
  };

  export type QuoteParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    input: string;
    inputAmount: BigNumber;
    minOutputAmount: BigNumber;
    swapTarget: string;
    assetQuote: string;
  };
}

export interface IndexDepositRouterInterface extends utils.Interface {
  functions: {
    "deposit(address,address,(address,uint256,uint256,address,bytes))": FunctionFragment;
    "deposit(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit(address,address,(address,uint256,uint256,address,bytes))"
      | "deposit(address,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit(address,address,(address,uint256,uint256,address,bytes))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IReserveRouter.QuoteParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deposit(address,address,(address,uint256,uint256,address,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,address)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IndexDepositRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IndexDepositRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "deposit(address,address,(address,uint256,uint256,address,bytes))"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      params: IReserveRouter.QuoteParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(address,address)"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "deposit(address,address,(address,uint256,uint256,address,bytes))"(
    index: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    params: IReserveRouter.QuoteParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(address,address)"(
    index: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "deposit(address,address,(address,uint256,uint256,address,bytes))"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      params: IReserveRouter.QuoteParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(address,address)"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    "deposit(address,address,(address,uint256,uint256,address,bytes))"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      params: IReserveRouter.QuoteParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(address,address)"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "deposit(address,address,(address,uint256,uint256,address,bytes))"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      params: IReserveRouter.QuoteParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(address,address)"(
      index: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
