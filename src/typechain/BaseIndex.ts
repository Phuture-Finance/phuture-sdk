import type {
	EventFragment,
	FunctionFragment,
	Result,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from "ethers";
import type {
	OnEvent,
	PromiseOrValue,
	TypedEvent,
	TypedEventFilter,
	TypedListener,
} from "./common";

export interface BaseIndexInterface extends utils.Interface {
	functions: {
		"DOMAIN_SEPARATOR()": FunctionFragment;
		"allowance(address,address)": FunctionFragment;
		"anatomy()": FunctionFragment;
		"approve(address,uint256)": FunctionFragment;
		"balanceOf(address)": FunctionFragment;
		"burn(address)": FunctionFragment;
		"decimals()": FunctionFragment;
		"decreaseAllowance(address,uint256)": FunctionFragment;
		"factory()": FunctionFragment;
		"inactiveAnatomy()": FunctionFragment;
		"increaseAllowance(address,uint256)": FunctionFragment;
		"mint(address)": FunctionFragment;
		"name()": FunctionFragment;
		"nonces(address)": FunctionFragment;
		"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
		"registry()": FunctionFragment;
		"supportsInterface(bytes4)": FunctionFragment;
		"symbol()": FunctionFragment;
		"totalSupply()": FunctionFragment;
		"transfer(address,uint256)": FunctionFragment;
		"transferFrom(address,address,uint256)": FunctionFragment;
		"vTokenFactory()": FunctionFragment;
	};

	getFunction(
		nameOrSignatureOrTopic:
			| "DOMAIN_SEPARATOR"
			| "DOMAIN_SEPARATOR()"
			| "allowance"
			| "allowance(address,address)"
			| "anatomy"
			| "anatomy()"
			| "approve"
			| "approve(address,uint256)"
			| "balanceOf"
			| "balanceOf(address)"
			| "burn"
			| "burn(address)"
			| "decimals"
			| "decimals()"
			| "decreaseAllowance"
			| "decreaseAllowance(address,uint256)"
			| "factory"
			| "factory()"
			| "inactiveAnatomy"
			| "inactiveAnatomy()"
			| "increaseAllowance"
			| "increaseAllowance(address,uint256)"
			| "mint"
			| "mint(address)"
			| "name"
			| "name()"
			| "nonces"
			| "nonces(address)"
			| "permit"
			| "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
			| "registry"
			| "registry()"
			| "supportsInterface"
			| "supportsInterface(bytes4)"
			| "symbol"
			| "symbol()"
			| "totalSupply"
			| "totalSupply()"
			| "transfer"
			| "transfer(address,uint256)"
			| "transferFrom"
			| "transferFrom(address,address,uint256)"
			| "vTokenFactory"
			| "vTokenFactory()",
	): FunctionFragment;

	encodeFunctionData(
		functionFragment: "DOMAIN_SEPARATOR",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "DOMAIN_SEPARATOR()",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "allowance",
		values: [PromiseOrValue<string>, PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "allowance(address,address)",
		values: [PromiseOrValue<string>, PromiseOrValue<string>],
	): string;
	encodeFunctionData(functionFragment: "anatomy", values?: undefined): string;
	encodeFunctionData(functionFragment: "anatomy()", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "approve",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "approve(address,uint256)",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "balanceOf",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "balanceOf(address)",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "burn",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "burn(address)",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "decimals()",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "decreaseAllowance",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "decreaseAllowance(address,uint256)",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(functionFragment: "factory", values?: undefined): string;
	encodeFunctionData(functionFragment: "factory()", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "inactiveAnatomy",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "inactiveAnatomy()",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "increaseAllowance",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "increaseAllowance(address,uint256)",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "mint",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "mint(address)",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "name()", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "nonces",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "nonces(address)",
		values: [PromiseOrValue<string>],
	): string;
	encodeFunctionData(
		functionFragment: "permit",
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
			PromiseOrValue<BytesLike>,
		],
	): string;
	encodeFunctionData(
		functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BigNumberish>,
			PromiseOrValue<BytesLike>,
			PromiseOrValue<BytesLike>,
		],
	): string;
	encodeFunctionData(functionFragment: "registry", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "registry()",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "supportsInterface",
		values: [PromiseOrValue<BytesLike>],
	): string;
	encodeFunctionData(
		functionFragment: "supportsInterface(bytes4)",
		values: [PromiseOrValue<BytesLike>],
	): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
	encodeFunctionData(
		functionFragment: "totalSupply",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "totalSupply()",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "transfer",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "transfer(address,uint256)",
		values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
	): string;
	encodeFunctionData(
		functionFragment: "transferFrom",
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
		],
	): string;
	encodeFunctionData(
		functionFragment: "transferFrom(address,address,uint256)",
		values: [
			PromiseOrValue<string>,
			PromiseOrValue<string>,
			PromiseOrValue<BigNumberish>,
		],
	): string;
	encodeFunctionData(
		functionFragment: "vTokenFactory",
		values?: undefined,
	): string;
	encodeFunctionData(
		functionFragment: "vTokenFactory()",
		values?: undefined,
	): string;

	decodeFunctionResult(
		functionFragment: "DOMAIN_SEPARATOR",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "DOMAIN_SEPARATOR()",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "allowance(address,address)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "anatomy", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "anatomy()", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "approve(address,uint256)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "balanceOf(address)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "burn(address)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "decreaseAllowance",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "decreaseAllowance(address,uint256)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "factory()", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "inactiveAnatomy",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "inactiveAnatomy()",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "increaseAllowance",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "increaseAllowance(address,uint256)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "mint(address)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "nonces(address)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "registry()", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "supportsInterface",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "supportsInterface(bytes4)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "totalSupply",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "totalSupply()",
		data: BytesLike,
	): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: "transfer(address,uint256)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "transferFrom",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "transferFrom(address,address,uint256)",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "vTokenFactory",
		data: BytesLike,
	): Result;
	decodeFunctionResult(
		functionFragment: "vTokenFactory()",
		data: BytesLike,
	): Result;

	events: {
		"Approval(address,address,uint256)": EventFragment;
		"Transfer(address,address,uint256)": EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
	getEvent(
		nameOrSignatureOrTopic: "Approval(address,address,uint256)",
	): EventFragment;
	getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
	getEvent(
		nameOrSignatureOrTopic: "Transfer(address,address,uint256)",
	): EventFragment;
}

export interface ApprovalEventObject {
	owner: string;
	spender: string;
	value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
	[string, string, BigNumber],
	ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface TransferEventObject {
	from: string;
	to: string;
	value: BigNumber;
}
export type TransferEvent = TypedEvent<
	[string, string, BigNumber],
	TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface BaseIndex extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	interface: BaseIndexInterface;

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>;

	listeners<TEvent extends TypedEvent>(
		eventFilter?: TypedEventFilter<TEvent>,
	): Array<TypedListener<TEvent>>;
	listeners(eventName?: string): Array<Listener>;
	removeAllListeners<TEvent extends TypedEvent>(
		eventFilter: TypedEventFilter<TEvent>,
	): this;
	removeAllListeners(eventName?: string): this;
	off: OnEvent<this>;
	on: OnEvent<this>;
	once: OnEvent<this>;
	removeListener: OnEvent<this>;

	functions: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

		"DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		"allowance(address,address)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		anatomy(
			overrides?: CallOverrides,
		): Promise<
			[string[], number[]] & { _assets: string[]; _weights: number[] }
		>;

		"anatomy()"(
			overrides?: CallOverrides,
		): Promise<
			[string[], number[]] & { _assets: string[]; _weights: number[] }
		>;

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"approve(address,uint256)"(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		balanceOf(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		"balanceOf(address)"(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		burn(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"burn(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		decimals(overrides?: CallOverrides): Promise<[number]>;

		"decimals()"(overrides?: CallOverrides): Promise<[number]>;

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"decreaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		factory(overrides?: CallOverrides): Promise<[string]>;

		"factory()"(overrides?: CallOverrides): Promise<[string]>;

		inactiveAnatomy(overrides?: CallOverrides): Promise<[string[]]>;

		"inactiveAnatomy()"(overrides?: CallOverrides): Promise<[string[]]>;

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"increaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		mint(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"mint(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		name(overrides?: CallOverrides): Promise<[string]>;

		"name()"(overrides?: CallOverrides): Promise<[string]>;

		nonces(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		"nonces(address)"(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<[BigNumber]>;

		permit(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		registry(overrides?: CallOverrides): Promise<[string]>;

		"registry()"(overrides?: CallOverrides): Promise<[string]>;

		supportsInterface(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<[boolean]>;

		"supportsInterface(bytes4)"(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<[boolean]>;

		symbol(overrides?: CallOverrides): Promise<[string]>;

		"symbol()"(overrides?: CallOverrides): Promise<[string]>;

		totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

		"totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

		transfer(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"transfer(address,uint256)"(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		"transferFrom(address,address,uint256)"(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>;

		vTokenFactory(overrides?: CallOverrides): Promise<[string]>;

		"vTokenFactory()"(overrides?: CallOverrides): Promise<[string]>;
	};

	DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

	"DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

	allowance(
		owner: PromiseOrValue<string>,
		spender: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	"allowance(address,address)"(
		owner: PromiseOrValue<string>,
		spender: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	anatomy(
		overrides?: CallOverrides,
	): Promise<[string[], number[]] & { _assets: string[]; _weights: number[] }>;

	"anatomy()"(
		overrides?: CallOverrides,
	): Promise<[string[], number[]] & { _assets: string[]; _weights: number[] }>;

	approve(
		spender: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"approve(address,uint256)"(
		spender: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	balanceOf(
		account: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	"balanceOf(address)"(
		account: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	burn(
		_recipient: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"burn(address)"(
		_recipient: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	decimals(overrides?: CallOverrides): Promise<number>;

	"decimals()"(overrides?: CallOverrides): Promise<number>;

	decreaseAllowance(
		spender: PromiseOrValue<string>,
		subtractedValue: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"decreaseAllowance(address,uint256)"(
		spender: PromiseOrValue<string>,
		subtractedValue: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	factory(overrides?: CallOverrides): Promise<string>;

	"factory()"(overrides?: CallOverrides): Promise<string>;

	inactiveAnatomy(overrides?: CallOverrides): Promise<string[]>;

	"inactiveAnatomy()"(overrides?: CallOverrides): Promise<string[]>;

	increaseAllowance(
		spender: PromiseOrValue<string>,
		addedValue: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"increaseAllowance(address,uint256)"(
		spender: PromiseOrValue<string>,
		addedValue: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	mint(
		_recipient: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"mint(address)"(
		_recipient: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	name(overrides?: CallOverrides): Promise<string>;

	"name()"(overrides?: CallOverrides): Promise<string>;

	nonces(
		owner: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	"nonces(address)"(
		owner: PromiseOrValue<string>,
		overrides?: CallOverrides,
	): Promise<BigNumber>;

	permit(
		owner: PromiseOrValue<string>,
		spender: PromiseOrValue<string>,
		value: PromiseOrValue<BigNumberish>,
		deadline: PromiseOrValue<BigNumberish>,
		v: PromiseOrValue<BigNumberish>,
		r: PromiseOrValue<BytesLike>,
		s: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
		owner: PromiseOrValue<string>,
		spender: PromiseOrValue<string>,
		value: PromiseOrValue<BigNumberish>,
		deadline: PromiseOrValue<BigNumberish>,
		v: PromiseOrValue<BigNumberish>,
		r: PromiseOrValue<BytesLike>,
		s: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	registry(overrides?: CallOverrides): Promise<string>;

	"registry()"(overrides?: CallOverrides): Promise<string>;

	supportsInterface(
		_interfaceId: PromiseOrValue<BytesLike>,
		overrides?: CallOverrides,
	): Promise<boolean>;

	"supportsInterface(bytes4)"(
		_interfaceId: PromiseOrValue<BytesLike>,
		overrides?: CallOverrides,
	): Promise<boolean>;

	symbol(overrides?: CallOverrides): Promise<string>;

	"symbol()"(overrides?: CallOverrides): Promise<string>;

	totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

	"totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

	transfer(
		to: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"transfer(address,uint256)"(
		to: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	transferFrom(
		from: PromiseOrValue<string>,
		to: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	"transferFrom(address,address,uint256)"(
		from: PromiseOrValue<string>,
		to: PromiseOrValue<string>,
		amount: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>;

	vTokenFactory(overrides?: CallOverrides): Promise<string>;

	"vTokenFactory()"(overrides?: CallOverrides): Promise<string>;

	callStatic: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

		"DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"allowance(address,address)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		anatomy(
			overrides?: CallOverrides,
		): Promise<
			[string[], number[]] & { _assets: string[]; _weights: number[] }
		>;

		"anatomy()"(
			overrides?: CallOverrides,
		): Promise<
			[string[], number[]] & { _assets: string[]; _weights: number[] }
		>;

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		"approve(address,uint256)"(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		balanceOf(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"balanceOf(address)"(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		burn(
			_recipient: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>;

		"burn(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>;

		decimals(overrides?: CallOverrides): Promise<number>;

		"decimals()"(overrides?: CallOverrides): Promise<number>;

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		"decreaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		factory(overrides?: CallOverrides): Promise<string>;

		"factory()"(overrides?: CallOverrides): Promise<string>;

		inactiveAnatomy(overrides?: CallOverrides): Promise<string[]>;

		"inactiveAnatomy()"(overrides?: CallOverrides): Promise<string[]>;

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		"increaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		mint(
			_recipient: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>;

		"mint(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<void>;

		name(overrides?: CallOverrides): Promise<string>;

		"name()"(overrides?: CallOverrides): Promise<string>;

		nonces(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"nonces(address)"(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		permit(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>;

		"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<void>;

		registry(overrides?: CallOverrides): Promise<string>;

		"registry()"(overrides?: CallOverrides): Promise<string>;

		supportsInterface(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		"supportsInterface(bytes4)"(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		symbol(overrides?: CallOverrides): Promise<string>;

		"symbol()"(overrides?: CallOverrides): Promise<string>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		"totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

		transfer(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		"transfer(address,uint256)"(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		"transferFrom(address,address,uint256)"(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: CallOverrides,
		): Promise<boolean>;

		vTokenFactory(overrides?: CallOverrides): Promise<string>;

		"vTokenFactory()"(overrides?: CallOverrides): Promise<string>;
	};

	filters: {
		"Approval(address,address,uint256)"(
			owner?: PromiseOrValue<string> | null,
			spender?: PromiseOrValue<string> | null,
			value?: null,
		): ApprovalEventFilter;
		Approval(
			owner?: PromiseOrValue<string> | null,
			spender?: PromiseOrValue<string> | null,
			value?: null,
		): ApprovalEventFilter;

		"Transfer(address,address,uint256)"(
			from?: PromiseOrValue<string> | null,
			to?: PromiseOrValue<string> | null,
			value?: null,
		): TransferEventFilter;
		Transfer(
			from?: PromiseOrValue<string> | null,
			to?: PromiseOrValue<string> | null,
			value?: null,
		): TransferEventFilter;
	};

	estimateGas: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

		"DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"allowance(address,address)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		anatomy(overrides?: CallOverrides): Promise<BigNumber>;

		"anatomy()"(overrides?: CallOverrides): Promise<BigNumber>;

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"approve(address,uint256)"(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		balanceOf(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"balanceOf(address)"(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		burn(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"burn(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		decimals(overrides?: CallOverrides): Promise<BigNumber>;

		"decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"decreaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		factory(overrides?: CallOverrides): Promise<BigNumber>;

		"factory()"(overrides?: CallOverrides): Promise<BigNumber>;

		inactiveAnatomy(overrides?: CallOverrides): Promise<BigNumber>;

		"inactiveAnatomy()"(overrides?: CallOverrides): Promise<BigNumber>;

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"increaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		mint(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"mint(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		name(overrides?: CallOverrides): Promise<BigNumber>;

		"name()"(overrides?: CallOverrides): Promise<BigNumber>;

		nonces(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"nonces(address)"(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		permit(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		registry(overrides?: CallOverrides): Promise<BigNumber>;

		"registry()"(overrides?: CallOverrides): Promise<BigNumber>;

		supportsInterface(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		"supportsInterface(bytes4)"(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<BigNumber>;

		symbol(overrides?: CallOverrides): Promise<BigNumber>;

		"symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

		totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

		"totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

		transfer(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"transfer(address,uint256)"(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		"transferFrom(address,address,uint256)"(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>;

		vTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

		"vTokenFactory()"(overrides?: CallOverrides): Promise<BigNumber>;
	};

	populateTransaction: {
		DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"DOMAIN_SEPARATOR()"(
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		allowance(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		"allowance(address,address)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		anatomy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"anatomy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		approve(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"approve(address,uint256)"(
			spender: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		balanceOf(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		"balanceOf(address)"(
			account: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		burn(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"burn(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		decreaseAllowance(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"decreaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			subtractedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		inactiveAnatomy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"inactiveAnatomy()"(
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		increaseAllowance(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"increaseAllowance(address,uint256)"(
			spender: PromiseOrValue<string>,
			addedValue: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		mint(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"mint(address)"(
			_recipient: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		nonces(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		"nonces(address)"(
			owner: PromiseOrValue<string>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		permit(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
			owner: PromiseOrValue<string>,
			spender: PromiseOrValue<string>,
			value: PromiseOrValue<BigNumberish>,
			deadline: PromiseOrValue<BigNumberish>,
			v: PromiseOrValue<BigNumberish>,
			r: PromiseOrValue<BytesLike>,
			s: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		supportsInterface(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		"supportsInterface(bytes4)"(
			_interfaceId: PromiseOrValue<BytesLike>,
			overrides?: CallOverrides,
		): Promise<PopulatedTransaction>;

		symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		transfer(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"transfer(address,uint256)"(
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		transferFrom(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		"transferFrom(address,address,uint256)"(
			from: PromiseOrValue<string>,
			to: PromiseOrValue<string>,
			amount: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>;

		vTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		"vTokenFactory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
	};
}
