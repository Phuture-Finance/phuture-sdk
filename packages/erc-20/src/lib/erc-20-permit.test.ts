import { expect } from 'chai';
import { ethers, Signer } from 'ethers';
import { Mock } from 'moq.ts';
import {
	AllowedPermitArguments,
	Erc20Permit,
	StandardPermitArguments,
} from '../src';
import { ERC20Permit as ERC20PermitContractInterface } from '../src/types';
import { Account } from '@phuture/account';

const erc20contract = new Mock<ERC20PermitContractInterface>()
	.setup((c) => c.address)
	.returns('0x0000000000000000000000000000000000000001')
	.object();

const standardPermitOptions: StandardPermitArguments = {
	v: 0,
	r: '0x0000000000000000000000000000000000000000000000000000000000000001',
	s: '0x0000000000000000000000000000000000000000000000000000000000000002',
	amount: 123,
	deadline: 123,
};
const allowedPermitOptions: AllowedPermitArguments = {
	v: 0,
	r: '0x0000000000000000000000000000000000000000000000000000000000000001',
	s: '0x0000000000000000000000000000000000000000000000000000000000000002',
	nonce: 123,
	expiry: 123,
};

describe('Erc20Permit', () => {
	const account = new Mock<Account>().object();
	const erc20Permit = new Erc20Permit(account, erc20contract);

	describe('#encodePermit', () => {
		it('works with StandardPermitArguments', () => {
			const calldata = erc20Permit.encodePermit(standardPermitOptions);
			expect(calldata).to.eq(
				'0xf3995c670000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'
			);
		});

		it('works with AllowedPermitArguments', () => {
			const calldata = erc20Permit.encodePermit(allowedPermitOptions);
			expect(calldata).to.eq(
				'0x4659a4940000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000007b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'
			);
		});
	});
});
