/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IIndexRouter {
  export type BurnParamsStruct = {
    index: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type BurnParamsStructOutput = [string, BigNumber, string] & {
    index: string;
    amount: BigNumber;
    recipient: string;
  };

  export type BurnQuoteParamsStruct = {
    swapTarget: PromiseOrValue<string>;
    buyAssetMinAmount: PromiseOrValue<BigNumberish>;
    assetQuote: PromiseOrValue<BytesLike>;
  };

  export type BurnQuoteParamsStructOutput = [string, BigNumber, string] & {
    swapTarget: string;
    buyAssetMinAmount: BigNumber;
    assetQuote: string;
  };

  export type BurnSwapParamsStruct = {
    index: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    outputAsset: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
    quotes: IIndexRouter.BurnQuoteParamsStruct[];
  };

  export type BurnSwapParamsStructOutput = [
    string,
    BigNumber,
    string,
    string,
    IIndexRouter.BurnQuoteParamsStructOutput[]
  ] & {
    index: string;
    amount: BigNumber;
    outputAsset: string;
    recipient: string;
    quotes: IIndexRouter.BurnQuoteParamsStructOutput[];
  };

  export type MintParamsStruct = {
    index: PromiseOrValue<string>;
    amountInBase: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type MintParamsStructOutput = [string, BigNumber, string] & {
    index: string;
    amountInBase: BigNumber;
    recipient: string;
  };

  export type MintQuoteParamsStruct = {
    asset: PromiseOrValue<string>;
    swapTarget: PromiseOrValue<string>;
    buyAssetMinAmount: PromiseOrValue<BigNumberish>;
    assetQuote: PromiseOrValue<BytesLike>;
  };

  export type MintQuoteParamsStructOutput = [
    string,
    string,
    BigNumber,
    string
  ] & {
    asset: string;
    swapTarget: string;
    buyAssetMinAmount: BigNumber;
    assetQuote: string;
  };

  export type MintSwapParamsStruct = {
    index: PromiseOrValue<string>;
    inputToken: PromiseOrValue<string>;
    amountInInputToken: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    quotes: IIndexRouter.MintQuoteParamsStruct[];
  };

  export type MintSwapParamsStructOutput = [
    string,
    string,
    BigNumber,
    string,
    IIndexRouter.MintQuoteParamsStructOutput[]
  ] & {
    index: string;
    inputToken: string;
    amountInInputToken: BigNumber;
    recipient: string;
    quotes: IIndexRouter.MintQuoteParamsStructOutput[];
  };

  export type MintSwapValueParamsStruct = {
    index: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
    quotes: IIndexRouter.MintQuoteParamsStruct[];
  };

  export type MintSwapValueParamsStructOutput = [
    string,
    string,
    IIndexRouter.MintQuoteParamsStructOutput[]
  ] & {
    index: string;
    recipient: string;
    quotes: IIndexRouter.MintQuoteParamsStructOutput[];
  };
}

export interface IndexRouterInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "burn((address,uint256,address))": FunctionFragment;
    "burnSwap((address,uint256,address,address,(address,uint256,bytes)[]))": FunctionFragment;
    "burnSwapValue((address,uint256,address,address,(address,uint256,bytes)[]))": FunctionFragment;
    "burnSwapValueWithPermit((address,uint256,address,address,(address,uint256,bytes)[]),uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "burnSwapWithPermit((address,uint256,address,address,(address,uint256,bytes)[]),uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "burnTokensAmount(address,uint256)": FunctionFragment;
    "burnWithPermit((address,uint256,address),uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "mint((address,uint256,address))": FunctionFragment;
    "mintSwap((address,address,uint256,address,(address,address,uint256,bytes)[]))": FunctionFragment;
    "mintSwapIndexAmount((address,address,uint256,address,(address,address,uint256,bytes)[]))": FunctionFragment;
    "mintSwapValue((address,address,(address,address,uint256,bytes)[]))": FunctionFragment;
    "mintSwapWithPermit((address,address,uint256,address,(address,address,uint256,bytes)[]),uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registry()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "burn"
      | "burnSwap"
      | "burnSwapValue"
      | "burnSwapValueWithPermit"
      | "burnSwapWithPermit"
      | "burnTokensAmount"
      | "burnWithPermit"
      | "initialize"
      | "mint"
      | "mintSwap"
      | "mintSwapIndexAmount"
      | "mintSwapValue"
      | "mintSwapWithPermit"
      | "proxiableUUID"
      | "registry"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [IIndexRouter.BurnParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSwap",
    values: [IIndexRouter.BurnSwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSwapValue",
    values: [IIndexRouter.BurnSwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSwapValueWithPermit",
    values: [
      IIndexRouter.BurnSwapParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnSwapWithPermit",
    values: [
      IIndexRouter.BurnSwapParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnTokensAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnWithPermit",
    values: [
      IIndexRouter.BurnParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [IIndexRouter.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSwap",
    values: [IIndexRouter.MintSwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSwapIndexAmount",
    values: [IIndexRouter.MintSwapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSwapValue",
    values: [IIndexRouter.MintSwapValueParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintSwapWithPermit",
    values: [
      IIndexRouter.MintSwapParamsStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnSwapValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSwapValueWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSwapWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSwapIndexAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSwapValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintSwapWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface IndexRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IndexRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    burn(
      _params: IIndexRouter.BurnParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnSwap(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnSwapValue(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnSwapValueWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnSwapWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnTokensAmount(
      _index: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _amounts: BigNumber[] }>;

    burnWithPermit(
      _params: IIndexRouter.BurnParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _WETH: PromiseOrValue<string>,
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      _params: IIndexRouter.MintParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintSwap(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintSwapIndexAmount(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    mintSwapValue(
      _params: IIndexRouter.MintSwapValueParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintSwapWithPermit(
      _params: IIndexRouter.MintSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  burn(
    _params: IIndexRouter.BurnParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnSwap(
    _params: IIndexRouter.BurnSwapParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnSwapValue(
    _params: IIndexRouter.BurnSwapParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnSwapValueWithPermit(
    _params: IIndexRouter.BurnSwapParamsStruct,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnSwapWithPermit(
    _params: IIndexRouter.BurnSwapParamsStruct,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnTokensAmount(
    _index: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burnWithPermit(
    _params: IIndexRouter.BurnParamsStruct,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _WETH: PromiseOrValue<string>,
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    _params: IIndexRouter.MintParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintSwap(
    _params: IIndexRouter.MintSwapParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintSwapIndexAmount(
    _params: IIndexRouter.MintSwapParamsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintSwapValue(
    _params: IIndexRouter.MintSwapValueParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintSwapWithPermit(
    _params: IIndexRouter.MintSwapParamsStruct,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    burn(
      _params: IIndexRouter.BurnParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    burnSwap(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnSwapValue(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnSwapValueWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnSwapWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTokensAmount(
      _index: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burnWithPermit(
      _params: IIndexRouter.BurnParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _WETH: PromiseOrValue<string>,
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _params: IIndexRouter.MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSwap(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSwapIndexAmount(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSwapValue(
      _params: IIndexRouter.MintSwapValueParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSwapWithPermit(
      _params: IIndexRouter.MintSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _params: IIndexRouter.BurnParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnSwap(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnSwapValue(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnSwapValueWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnSwapWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnTokensAmount(
      _index: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnWithPermit(
      _params: IIndexRouter.BurnParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _WETH: PromiseOrValue<string>,
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      _params: IIndexRouter.MintParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintSwap(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintSwapIndexAmount(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintSwapValue(
      _params: IIndexRouter.MintSwapValueParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintSwapWithPermit(
      _params: IIndexRouter.MintSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _params: IIndexRouter.BurnParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnSwap(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnSwapValue(
      _params: IIndexRouter.BurnSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnSwapValueWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnSwapWithPermit(
      _params: IIndexRouter.BurnSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnTokensAmount(
      _index: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnWithPermit(
      _params: IIndexRouter.BurnParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _WETH: PromiseOrValue<string>,
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _params: IIndexRouter.MintParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintSwap(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintSwapIndexAmount(
      _params: IIndexRouter.MintSwapParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintSwapValue(
      _params: IIndexRouter.MintSwapValueParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintSwapWithPermit(
      _params: IIndexRouter.MintSwapParamsStruct,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
